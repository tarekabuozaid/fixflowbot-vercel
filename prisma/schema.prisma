generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               BigInt          @id @default(autoincrement())
  tgId             BigInt?         @unique
  firstName        String?
  email            String?
  phone            String?
  status           UserStatus      @default(pending)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  activeFacilityId BigInt?
  memberships      FacilityMember[]
  switchRequests   FacilitySwitchRequest[]
  statusUpdates    StatusHistory[]
  notifications    Notification[]
  reminders        Reminder[]
  activeFacility   Facility?        @relation(fields: [activeFacilityId], references: [id])
  workOrders       WorkOrder[]      @relation("WO_ByUser")

  @@index([activeFacilityId])
}

model Facility {
  id            BigInt          @id @default(autoincrement())
  name          String          @unique
  city          String?
  phone         String?
  isDefault     Boolean         @default(false)
  isActive      Boolean         @default(false)
  status        String          @default("active")
  planTier      PlanTier        @default(Free)
  createdAt     DateTime        @default(now())
  members       FacilityMember[]
  User          User[]
  workOrders    WorkOrder[]
  notifications Notification[]
  reports       Report[]
  reminders     Reminder[]
  switchRequests FacilitySwitchRequest[]
}

model FacilityMember {
  id         BigInt   @id @default(autoincrement())
  userId     BigInt
  facilityId BigInt
  role       Role     @default(user)
  status     String   @default("active")
  joinedAt   DateTime @default(now())
  facility   Facility @relation(fields: [facilityId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, facilityId])
  @@index([facilityId, role])
}

model WorkOrder {
  id              BigInt          @id @default(autoincrement())
  facilityId      BigInt
  createdByUserId BigInt?
  status          WorkOrderStatus @default(open)
  typeOfWork      String?
  typeOfService   String?
  priority        String?
  location        String?
  department      String?
  equipment       String?
  description     String
  notes           String?
  callerPhone     String?
  createdAt       DateTime        @default(now())
  imageUrl        String?
  closeImageUrl   String?
  maintenanceType String?
  groupName       String?
  assignee        String?
  updatedAt       DateTime        @updatedAt
  statusHistory   StatusHistory[]
  byUser          User?           @relation("WO_ByUser", fields: [createdByUserId], references: [id])
  facility        Facility        @relation(fields: [facilityId], references: [id])

  @@index([facilityId, status, updatedAt])
  @@index([createdByUserId])
}

model StatusHistory {
  id              BigInt    @id @default(autoincrement())
  workOrderId     BigInt
  oldStatus       String
  newStatus       String
  createdAt       DateTime  @default(now())
  updatedByUserId BigInt
  updatedByUser   User      @relation(fields: [updatedByUserId], references: [id])
  workOrder       WorkOrder @relation(fields: [workOrderId], references: [id])

  @@index([workOrderId, createdAt])
}

model FacilitySwitchRequest {
  id             BigInt        @id @default(autoincrement())
  userId         BigInt
  facilityId     BigInt
  requestedRole  Role          @default(user)
  status         RequestStatus @default(pending)
  requestDate    DateTime      @default(now())
  approvedAt     DateTime?
  approvedBy     BigInt?
  user           User          @relation(fields: [userId], references: [id])
  facility       Facility      @relation(fields: [facilityId], references: [id])
}

model Notification {
  id          BigInt           @id @default(autoincrement())
  userId      BigInt
  facilityId  BigInt?
  type        NotificationType
  title       String
  message     String
  data        Json?
  isRead      Boolean          @default(false)
  createdAt   DateTime         @default(now())
  user        User             @relation(fields: [userId], references: [id])
  facility    Facility?        @relation(fields: [facilityId], references: [id])

  @@index([userId, isRead, createdAt])
  @@index([facilityId, type, createdAt])
}

model Report {
  id          BigInt      @id @default(autoincrement())
  facilityId  BigInt
  type        ReportType
  period      String      // daily, weekly, monthly
  data        Json
  createdAt   DateTime    @default(now())
  facility    Facility    @relation(fields: [facilityId], references: [id])

  @@index([facilityId, type, period, createdAt])
}

model Reminder {
  id              BigInt           @id @default(autoincrement())
  facilityId      BigInt
  createdByUserId BigInt
  type            ReminderType
  title           String
  message         String
  frequency       ReminderFrequency @default(once)
  scheduledFor    DateTime
  lastSent        DateTime?
  isActive        Boolean          @default(true)
  data            Json?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  facility        Facility         @relation(fields: [facilityId], references: [id])
  createdByUser   User             @relation(fields: [createdByUserId], references: [id])

  @@index([facilityId, scheduledFor, isActive])
  @@index([createdByUserId, scheduledFor])
}

enum Role {
  facility_admin
  supervisor
  technician
  user
}

enum UserStatus {
  pending
  active
  blocked
}

enum WorkOrderStatus {
  open
  in_progress
  done
  closed
}

enum RequestStatus {
  pending
  approved
  rejected
}

enum PlanTier {
  Free
  Pro
  Business
}

enum NotificationType {
  work_order_created
  work_order_status_changed
  work_order_assigned
  member_joined
  member_left
  facility_activated
  high_priority_alert
  daily_summary
  weekly_report
  system_alert
  new_member_request
  membership_approved
  role_changed
}

enum ReportType {
  work_order_summary
  member_activity
  facility_performance
  priority_analysis
  status_distribution
}

enum ReminderType {
  work_order_due
  work_order_overdue
  periodic_check
  custom_reminder
  maintenance_schedule
  inspection_due
}

enum ReminderFrequency {
  once
  daily
  weekly
  monthly
  custom
}
